name: Release

on:
  push:
    tags:
      - '*.*.*'
jobs:
# -----------------------------------------------------------------------------
# Build and Package
# -----------------------------------------------------------------------------
  build_package:
    name: Build and Package
    runs-on: self-hosted
    permissions:
      packages: write
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.21'

      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Build and Package
        run: |
          echo "$GPG_PRIVATE_KEY" > key.gpg
          ./build.sh install_tools
          ./build.sh release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          STAGING_DIR: /mnt/repos
          BREW_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}

# -----------------------------------------------------------------------------
# Stage Repos
# -----------------------------------------------------------------------------
  stage_latest_release:
    name: Stage latest package
    runs-on: self-hosted
    needs: build_package
    steps:
      - run: ./build.sh copy_latest
        env:
          STAGING_DIR: /mnt/repos
          GPG_KEY_ID: ${{ secrets.GPG_FINGERPRINT }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

  copy_install_script:
    name: Copy install script
    runs-on: self-hosted
    needs: stage_latest_release
    steps:
      - run: cp -f install.sh /mnt/repos/install.sh

# -----------------------------------------------------------------------------
# Create Repos
# -----------------------------------------------------------------------------
  create_apk_repo:
    name: Create APK Repo
    runs-on: self-hosted
    needs: build_package
    steps:
      - run: |
          echo "$RSA_PRIVATE_KEY" > alpine.key
           ./build.sh in_docker apk
        env:
          STAGING_DIR: /mnt/repos
          RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}

  create_rpm_repo:
    name: Create RPM Repo
    runs-on: self-hosted
    needs: build_package
    steps:
      - name: Create RPM Repository
        run: ./build.sh repo rpm
        env:
          STAGING_DIR: /mnt/repos

  create_deb_repo:
    name: Create DEB Repo
    runs-on: self-hosted
    needs: build_package
    steps:
      - name: Create DEB Repository
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          ./build.sh repo deb
        env:
          STAGING_DIR: /mnt/repos
          GPG_KEY_ID: ${{ secrets.GPG_FINGERPRINT }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

  create_archlinux_repo:
    name: Create Arch Linux Repo
    runs-on: self-hosted
    needs: build_package
    steps:
      - name: Create AUR (custom) Repository
        run: ./build.sh in_docker aur-custom
        env:
          STAGING_DIR: /mnt/repos

# -----------------------------------------------------------------------------
# Tests
# -----------------------------------------------------------------------------
  test_apk_repo:
    name: Test APK Package and Repo
    runs-on: self-hosted
    needs: create_apk_repo
    steps:
      - run: bash tests/test-apk.sh

  test_archlinux_repo:
    name: Test Arch Linux Package and Repo
    runs-on: self-hosted
    needs: create_archlinux_repo
    steps:
      - run: bash tests/test-archlinux.sh

  test_archlinux_pkgbuild:
    name: Test Arch Linux PKGBUILD
    runs-on: self-hosted
    needs: build_package
    steps:
      - run: bash tests/test-archlinux-aur.sh

  test_deb_repo:
    name: Test DEB Package and Repo
    runs-on: self-hosted
    needs: create_deb_repo
    steps:
      - run: bash tests/test-deb.sh

  test_install_script:
    name: Test Install Script
    runs-on: self-hosted
    needs: copy_install_script
    steps:
      - run: bash tests/test-installer.sh

  test_rpm_repo:
    name: Test RPM Package and Repo
    runs-on: self-hosted
    needs: create_rpm_repo
    steps:
      - run: bash tests/test-rpm.sh

# -----------------------------------------------------------------------------
# Publish
# -----------------------------------------------------------------------------
  index_repos:
    name: Index Package Repos
    runs-on: self-hosted
    needs:
      - test_apk_repo
      - test_archlinux_pkgbuild
      - test_archlinux_repo
      - test_deb_repo
      - test_install_script
      - test_rpm_repo
    steps:
      - name: S3 Index Generator
        run: |
          docker run --rm \
            -v /mnt/repos:/mnt/repos \
            -v ${PWD}:/workspace \
            -w /workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION='us-east-1' \
            ghcr.io/joshbeard/web-indexer/web-indexer:latest

  publish_repos:
    name: Publish Package Repos
    runs-on: self-hosted
    needs: index_repos
    steps:
      - name: Sync to S3
        run: |
          /usr/local/bin/aws s3 sync /mnt/repos s3://jbeard-test-pkgs --delete --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  docker-hub-doc:
    name: Publish DockerHub Readme
    runs-on: ubuntu-latest
    needs:
      - test_apk_repo
      - test_archlinux_pkgbuild
      - test_archlinux_repo
      - test_deb_repo
      - test_install_script
      - test_rpm_repo
    steps:
      - uses: actions/checkout@master
      - uses: meeDamian/sync-readme@v1.0.6
        with:
          user: ${{ secrets.DOCKERHUB_USERNAME }}
          pass: ${{ secrets.DOCKERHUB_TOKEN }}
          slug: joshbeard/hello-world
          readme: ./README.md
          description: Simple hello-world to use as an example
