# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=jcroql
version: 1

project_name: hello-world

before:
  hooks:
    - go mod tidy

snapshot:
  name_template: "{{ .Tag }}-next"

checksum:
  name_template: 'checksums.txt'

metadata:
  mod_timestamp: "{{ .CommitTimestamp }}"

builds:
  - env:
      # goreleaser does not work with CGO, it could also complicate
      # usage by users in CI/CD systems like Terraform Cloud where
      # they are unable to install libraries.
      - CGO_ENABLED=0
    mod_timestamp: "{{ .CommitTimestamp }}"
    flags:
      - -trimpath
    ldflags:
      - "-s -w -X main.version={{.Version}}"
    goos:
      - linux
      - darwin
      - windows
      - freebsd
    goarch:
      - "386"
      - amd64
      - arm
      - arm64
    ignore:
      - goos: windows
        goarch: arm
    goarm:
      - "7"
archives:
  - #
    format: tar.gz
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    format_overrides:
      - goos: windows
        format: zip
    files: []
    #   - src: LICENSE
    #   - src: README.md
    # name_template: >-
    #   {{- .ProjectName }}_
    #   {{- title .Os }}_
    #   {{- if eq .Arch "amd64" }}x86_64
    #   {{- else if eq .Arch "386" }}i386
    #   {{- else }}{{ .Arch }}{{ end }}
    #   {{- if .Arm }}v{{ .Arm }}{{ end -}}
    builds_info:
      group: root
      owner: root
signs:
  - artifacts: all
    args:
      - "--batch"
      - "--local-user"
      - "{{ .Env.GPG_FINGERPRINT }}"
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"
dockers:
  - image_templates:
      - joshbeard/hello-world:latest
      - joshbeard/hello-world:{{ .Tag }}
      - ghcr.io/joshbeard/testing-packaging/hello-world:latest
      - ghcr.io/joshbeard/testing-packaging/hello-world:{{ .Tag }}
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
    use: buildx

aurs:
  - name: hello-world-bin

    homepage: "https://get.jbeard.dev/"
    description: "Says hello world"

    maintainers:
      - 'Josh Beard <josh@jbeard.dev>'

    #contributors:
    #  - 'Foo Zaz <foo at zaz dot com>'

    license: "MIT"

    # Default: 'install -Dm755 "./PROJECT_NAME" "${pkgdir}/usr/bin/PROJECT_NAME"'
    #package: |-
    #  # bin
    #  install -Dm755 "./mybin" "${pkgdir}/usr/bin/mybin"

    #  # license
    #  install -Dm644 "./LICENSE.md" "${pkgdir}/usr/share/licenses/mybin/LICENSE"

    #  # completions
    #  mkdir -p "${pkgdir}/usr/share/bash-completion/completions/"
    #  mkdir -p "${pkgdir}/usr/share/zsh/site-functions/"
    #  mkdir -p "${pkgdir}/usr/share/fish/vendor_completions.d/"
    #  install -Dm644 "./completions/mybin.bash" "${pkgdir}/usr/share/bash-completion/completions/mybin"
    #  install -Dm644 "./completions/mybin.zsh" "${pkgdir}/usr/share/zsh/site-functions/_mybin"
    #  install -Dm644 "./completions/mybin.fish" "${pkgdir}/usr/share/fish/vendor_completions.d/mybin.fish"

    #  # man pages
    #  install -Dm644 "./manpages/mybin.1.gz" "${pkgdir}/usr/share/man/man1/mybin.1.gz"

    # Git author used to commit to the repository.
    #commit_author:
    #  name: goreleaserbot
    #  email: bot@goreleaser.com

    # Commit message.
    #
    # Default: 'Update to {{ .Tag }}'
    # Templates: allowed
    #commit_msg_template: "pkgbuild updates"

    # If you build for multiple GOAMD64 versions, you may use this to choose which one to use.
    #
    # Default: 'v1'.
    goamd64: v1

    # The value to be passed to `GIT_SSH_COMMAND`.
    # This is mainly used to specify the SSH private key used to pull/push to
    # the Git URL.
    #
    # Default: 'ssh -i {{ .KeyPath }} -o StrictHostKeyChecking=accept-new -F /dev/null'
    #git_ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'

    # URL which is determined by the given Token
    # (github, gitlab or gitea).
    #
    # Default: depends on the client
    # Templates: allowed
    #url_template: "https://get.jbeard.dev/archlinux/{{ .Tag }}/{{ .ArtifactName }}"
    url_template: "https://get.jbeard.dev/pkg/{{ .Version }}/{{ .ArtifactName }}"

    # The SSH private key that should be used to commit to the Git repository.
    # This can either be a path or the key contents.
    #
    # IMPORTANT: the key must not be password-protected.
    #
    #private_key: '{{ .Env.AUR_KEY }}'

    # The AUR Git URL for this package.
    # Publish is skipped if empty.
    #git_url: 'ssh://aur@aur.archlinux.org/mypackage-bin.git'

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    #
    # If set to auto, the release will not be uploaded to the AUR repo
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1.
    skip_upload: true


    # Directory in which the files will be created inside the repository.
    # Only useful if you're creating your own AUR with multiple packages in a
    # single repository.
    #
    # Default: .
    # Templates: allowed
    # Since: v1.23
    #directory: "."
    #

nfpms:
  - vendor: "Josh Beard"
    maintainer: "Josh Beard <josh@jbeard.dev>"
    homepage: "http://github.com/joshbeard/testing-packaging"
    license: "MIT"
    description: |
      FooBar is the great foo and bar software.
        And this can be in multiple lines!
    #prerelease: beta1
    release: "${RELEASE}"
    priority: "extra"
    section: vcs
    # contents:
    #   - src: dist/hello-world_{{ .Os }}_{{ .Arch }}/hello-world
    #     dst: /usr/bin/hello-world
    #     expand: true
    formats:
      - apk
      - deb
      - rpm
      - archlinux
    rpm:
      signature:
        key_file: key.gpg
    deb:
      signature:
        key_file: key.gpg
    apk:
      #signature:
      #  key_file: key.gpg
    archlinux:
      packager: Josh Beard <josh@jbeard.dev>
